<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Pascalina</title>
        <link>https://pascalina.l2n.me/posts/</link>
        <description>Recent content in Posts on Pascalina</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>pt-BR</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 21 Aug 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://pascalina.l2n.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>O que são branches e como elas funcionam</title>
            <link>https://pascalina.l2n.me/posts/2020/08/o-que-s%C3%A3o-branches-e-como-elas-funcionam/</link>
            <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://pascalina.l2n.me/posts/2020/08/o-que-s%C3%A3o-branches-e-como-elas-funcionam/</guid>
            <description>Branches: navegando entre diferentes ramos de trabalho Que bom te ver por aqui! Até este momento aprendemos sobre como contribuir para projetos abertos utilizando o git por meio da branch master. Ok, mas o que é branch master? Explicamos.
Branch significa ramo de trabalho e a branch master é o ramo principal. No post Como contribuir com projetos abertos aprendemos a fazer um fork de um projeto para o nosso repositório do GitHub e depois a cloná-lo (do repositório) para um diretório local da nossa máquina.</description>
            <content type="html"><![CDATA[<h2 id="branches-navegando-entre-diferentes-ramos-de-trabalho">Branches: navegando entre diferentes ramos de trabalho</h2>
<p>Que bom te ver por aqui! Até este momento aprendemos sobre como contribuir para projetos abertos utilizando o git por meio da branch master. Ok, mas o que é branch master? Explicamos.</p>
<p>Branch significa ramo de trabalho e a branch master é o ramo principal. No post <a href="/posts/2020/08/como-contribuir-com-projetos-abertos/"><em>Como contribuir com projetos abertos</em></a> aprendemos a fazer um fork de um projeto para o nosso repositório do GitHub e depois a cloná-lo (do repositório) para um diretório local da nossa máquina. Uma vez clonado o projeto, podemos incluir alterações sem interferir no código original (aquele que está no repositório em que fizemos o fork).</p>
<p>Em um primeiro contato com o git, nossas primeiras contribuições foram feitas no ramo principal, na branch master do repositório local. No entanto, quando trabalhamos em um projeto, geralmente atuamos em diferentes partes. Submeter um <em>pull request</em> com alterações diversas não é recomendado. Além disso, nosso ramo principal de trabalho precisa se manter coerente e estável. Por isso, chegou a hora de aprender a usar outras branches além da master.</p>
<p>Pode soar complexo, mas a verdade é que fazer operações em branches separadas nos ajuda a melhor organizar o fluxo de trabalho. Para cada alteração desejada é recomendado criar uma nova branch.</p>
<p>A título de exemplo, vamos supor que queremos criar um novo post no site do Pascalina sobre um tema qualquer, qual seja, &ldquo;como usar o GitHub&rdquo;. Vamos fazer isso pasito a pasito logo abaixo:</p>
<ol>
<li>No seu terminal, certifique-se de que você está no diretório do seu projeto usando o comando <code>pwd</code>.</li>
</ol>
<p>Para verificar quantos ramos de trabalho existem e em qual você está basta digitar:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git branch -a
</code></pre></div><p>Se você ainda não criou nenhuma branch, você só terá a branch master, como mostrado abaixo:</p>
<p><img src="images/git_branch.png" alt="Lista de branches"></p>
<ol start="2">
<li>Para criar uma nova branch, digite:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git branch nome_da_branch
</code></pre></div><p>O ideal é que você nomeie a branch de forma que remeta à ação que está sendo realizada. Considerando o exemplo proposto aqui do nosso novo post sobre &ldquo;como usar o GitHub&rdquo;, poderíamos nomear a branch de tutorial_github.</p>
<p>Para listar as branches disponíveis, utilizaremos mais uma vez o comando <code>git branch -a</code>. Aqui o &ldquo;-a&rdquo; significa &ldquo;all&rdquo;. O que você está dizendo então é: git me mostre todas as branches disponíveis.</p>
<p>Além de visualizar todas as branches, o terminal indica a branch na qual você se encontra sinalizando-a em verde e com um asterisco ao lado, como no print abaixo:</p>
<p><img src="images/git_new_branch.png" alt="Criando e listando branches"></p>
<p>Apesar de criar uma nova branch, como você pode ver, ainda estamos na branch master. Para entrar na nova branch:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git checkout nome_da_branch
</code></pre></div><p>Quando criamos uma branch, o que acontece é que uma cópia do projeto é criada nesse novo ramo de trabalho, levando em consideração o último commit feito na branch anterior (onde você estava quando usou o comando <code>git branch nome_da_branch</code>). Suas alterações subsequentes ficarão armazenadas somente na branch em que você está trabalhando.</p>
<p><img src="images/git_switch_branch.png" alt="Trocando de branch"></p>
<p>No caso da imagem acima, trocamos para o ramo new_branch onde iremos então escrever o novo post.</p>
<ol start="3">
<li>Tendo finalizado o trabalho, você deve subir a branch recém-criada para o seu repositório remoto no GitHub, apelidado convencionalmente de <em>origin</em>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git push origin nome_da_branch
</code></pre></div><p>O que você está dizendo aqui é: git empurre nome_da_branch que está no meu repositório local para o meu repositório remoto (no GitHub). Essa é a sintaxe padrão: git + ação que você quer fazer + o lugar de destino + o objeto que você quer enviar.</p>
<p><img src="images/git_push.gif" alt="git push"></p>
<ol start="4">
<li>Agora suas atualizações estão no seu repositório, mas você ainda precisa submetê-las para a autora do repositório original. Isso é feito na própria interface do GitHub, por meio do <em>pull request</em>. No post <a href="/posts/2020/08/como-contribuir-com-projetos-abertos/"><em>Como contribuir com projetos abertos</em></a> ensinamos como fazer isso. A diferença aqui é que ao invés de submeter um pedido de request da sua master para a master do projeto original, vamos submeter um pedido da sua branch para a master do repositório &ldquo;dono&rdquo; do projeto.</li>
</ol>
<p><img src="images/pullrequest.png" alt="Pull Request"></p>
<ol start="5">
<li>Não esqueça de enviar uma mensagem explicando suas contribuições para a proprietária do projeto. Se ela esiver satisfeita será feito um <em>merge</em> das suas constribuições na branch master do repositório original.</li>
</ol>
<p><img src="images/git_merge.gif" alt="git merge"></p>
<p>Para terminar, vamos revisar algumas cositas más:</p>
<ul>
<li>
<p>As branches servem para dinamizar e flexibilizar o fluxo de trabalho uma vez que a branch principal requer estabilidade e coerência. A estrutura de trabalho por meio de branches também permite que diferentes recursos sejam criados por múltiplos colaboradores ao mesmo tempo sem comprometer a master.</p>
</li>
<li>
<p>Ao nomear uma branch, seja o mais descritiva possível para que outras colaboradoras acompanhem o que está sendo feito de forma rápida e prática.</p>
</li>
<li>
<p>Para incorporar as branches na branch master, abra pull requests, sempre um para cada branch.</p>
</li>
<li>
<p>O GitHub fornece guias <a href="https://try.github.io/">aqui</a> e tutoriais interativos sobre git <a href="https://learngitbranching.js.org">aqui</a>.</p>
</li>
<li>
<p>Não se preocupe em memorizar todos os comandos utilizados no terminal. Quando tiver dúvidas, você pode pedir ajuda no próprio terminal utilizando a sintaxe: git + ação que deseja realizar + &ndash;help, por exemplo:</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git branch --help
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Criadora do SciHub</title>
            <link>https://pascalina.l2n.me/posts/2020/08/criadora-do-scihub/</link>
            <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://pascalina.l2n.me/posts/2020/08/criadora-do-scihub/</guid>
            <description>[TO DO]</description>
            <content type="html"><![CDATA[<p>[TO DO]</p>
]]></content>
        </item>
        
        <item>
            <title>Como contribuir com projetos abertos</title>
            <link>https://pascalina.l2n.me/posts/2020/08/como-contribuir-com-projetos-abertos/</link>
            <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://pascalina.l2n.me/posts/2020/08/como-contribuir-com-projetos-abertos/</guid>
            <description>Para essa receita você vai precisar de: acesso à internet, uma conta no GitHub, ter o Git instalado no seu computador (saiba mais aqui), criatividade para colaborar com projetos e uma pitada de curiosidade.
Tá a fim de compartilhar conhecimento? Então vem!
 Contribuir com um projeto aberto utilizando as ferramentas que vamos detalhar melhor nesse post, é tipo isso mesmo, uma receitinha de bolo.
Vamos adotar como exemplo para essa explicação, a forma como nos colaboramos para construção desse site, o Pascalina &amp;lt;3</description>
            <content type="html"><![CDATA[<p>Para essa receita você vai precisar de: acesso à internet, uma conta no GitHub, ter o Git instalado no seu computador (<a href="https://git-scm.com/book/pt-br/v2/Come%C3%A7ando-Instalando-o-Git">saiba mais aqui</a>), criatividade para colaborar com projetos e uma pitada de curiosidade.</p>
<p><strong><em>Tá a fim de compartilhar conhecimento? Então vem!</em></strong></p>
<figure><img src="images/giphy.gif"/>
</figure>

<p>Contribuir com um projeto aberto utilizando as ferramentas que vamos detalhar melhor nesse post, é tipo isso mesmo, uma receitinha de bolo.</p>
<p>Vamos adotar como exemplo para essa explicação, a forma como nos colaboramos para construção desse site, o Pascalina &lt;3</p>
<blockquote>
<p>Vale lembrar que o nosso site foi feito utilizando o Hugo, que é um gerador de sites estáticos, desenvolvido em Golang. É uma aplicação que auxilia o usuário a gerenciar, publicar e divulgar o seu conteúdo de uma maneira mais rápida e prática. Leia mais sobre o Hugo e a sua instalação (<a href="https://gohugo.io/about/">aqui</a>).</p>
</blockquote>
<ol>
<li>
<p>Primeiro, você precisa criar uma conta no GitHub, uma plataforma de hospedagem de código-fonte com controle de versão usando o Git. Essa ferramenta possibilita que programadores, utilitários ou qualquer usuário cadastrado contribuam com projetos abertos ou privados de qualquer lugar do mundo.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</li>
<li>
<p>Depois encontre o diretório do projeto dentro do GitHub. No nosso caso, o diretório do projeto pode ser acessado por esse link: <a href="https://github.com/luanguimaraesla/pascalina">https://github.com/luanguimaraesla/pascalina</a>. Dê uma olhada e veja como é organizado um diretório, o site disponibiliza uma série de ferramentas para trabalharmos.</p>
<blockquote>
<p><strong><em>IMPORTANTE</em></strong> Antes de iniciar a sua contribuição, é uma boa prática procurar no repositório do projeto de interesse se existe alguma seção destinada à contribuições ou algum arquivo tipo CONTRIBUTE.md. A própria comunidade define os <em>guidelines</em> de contribuição e o que deve ser levado em consideração para realizá-la.</p>
</blockquote>
</li>
<li>
<p>Agora é necessário que você faça um Fork do repositório onde se encontra o projeto do seu interesse. Essa função permite a criação de uma cópia de um repositório, onde é possível experimentar livremente alterações sem afetar o projeto original.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Para isso, basta clicar no botão “Fork” localizado no canto superior direito, como mostra a imagem a seguir. Quando o Fork do repositório for concluído, você será redirecionado automaticamente para a cópia do repositório na sua conta do GitHub.</p>
<p><img src="images/fork.png" alt="Fork"></p>
</li>
<li>
<p>Agora vamos iniciar o acesso para inserir nossas contribuições. No canto superior direito podemos encontrar o botão “Code”, como mostra a imagem. Ao clicar nele, será exibida uma caixa com um link URL, copie esse link.</p>
<p><img src="images/code.png" alt="Code"></p>
</li>
<li>
<p>Abra o terminal do seu computador e altere o diretório de trabalho atual para o local em que deseja ter o diretório clonado. Depois execute o seguinte comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone <span style="color:#f92672">[</span>cole o link aqui<span style="color:#f92672">]</span>
<span style="color:#75715e"># exemplo:</span>
<span style="color:#75715e"># git clone https://github.com/luanguimaraesla/pascalina</span>
</code></pre></div></li>
<li>
<p>Pronto! A pasta do repositório agora está salva no seu computador. Abra a mesma no seu editor de código para ter acesso as pastas e códigos do repositório que foi copiado. Lembrando que toda alteração feita nesse projeto não irá afetar o código original.</p>
<p>No nosso exemplo, estamos contribuindo para a publicação de um post no site Pascalina, mas você pode usar esse tutorial para realizar outros tipos de alterações.</p>
<p>Provavelmente, no seu editor de código você poderá navegar pelas pastas que estão na raiz do projeto e inserir suas modificações no código. Nesse caso, a criação de posts é feita acessando as pastas: <code>content/posts</code>. Dentro da pasta “Post” você criará um documento com a extensão <em>.md</em> e poderá escrever o texto que pretende publicar no site, para isso usamos uma linguagem específica no nosso projeto, chamada <em>Markdown</em>.</p>
<blockquote>
<p>Markdown é uma linguagem simples de marcação, originalmente criada por John Gruber e Aaron Swartz, ela converte seu texto em HTML válido.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>
Leia um pouco mais sobre como usar essa linguagem no Markdown Guide.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
</blockquote>
</li>
<li>
<p>Quando você encerrar e salvar todas as contribuições que desejava fazer no código do projeto, é necessário enviá-las para o GitHub para que de fato elas sejam implementadas e a contribuição seja feita. Esse processo é realizado por meio do Git e precisaremos rodar alguns comandos no nosso terminal (certifique-se que o diretório atual seja o do projeto).</p>
<p>No <strong>caso específico de colaboração com o nosso site:</strong></p>
<blockquote>
<p>O primeiro comando dessa etapa é o hugo, mas vale ressaltar que em outros casos pode ser necessário rodar testes ou algo do tipo, dependendo da aplicação isso irá variar. Se a sua intenção é colaborar com outro projeto aberto, <em>pule esse comando e vá direto para o git</em>.</p>
</blockquote>
<p>O comando hugo gera seu site no diretório público e assim está tudo pronto para ser implantado no seu servidor da web.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><p>Em seguida, podemos observar todas as mudanças feitas e arquivos criados, com o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git status
</code></pre></div><p>O resultado desse comando é uma série de mudanças implementadas por nós e pelo Hugo automaticamente. Para adicionar todas essas mudanças na área de <em>stage</em>, usamos o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git add -A
</code></pre></div><p>Agora vamos salvar essas mudanças com o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git commit -m “adding a new post - how to contribute to open source projects”
</code></pre></div><p>Entre as aspas você pode inserir qualquer comentário que te ajude a identificar esse commit caso seja necessário. É importante que as mensagens sejam curtas e significativas.</p>
<p>E para passar todas essas mudanças do repositório local, ou seja, do seu computador para o repositório remoto que é o GitHub, usamos o comando:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git push origin master
</code></pre></div><p>Assim, todas as mudanças que você realizou no projeto estão agora salvas no GitHub.</p>
</li>
<li>
<p>Para que as contribuições sejam aceitas pelo autor do projeto o qual você está sugerindo mudanças, é preciso fazer um pedido para que ele as aceite. Esse pedido é feito por meio do <em>pull request</em>, para acessar essa função devemos voltar ao repositório origem do projeto e clicar na aba “Pull requests”, como mostra a imagem.</p>
<p><img src="images/pull_requests.png" alt=""></p>
<p>Dentro dessa aba você irá clicar no botão “New pull request”.</p>
<p><img src="images/new_pull_request.png" alt=""></p>
<p>E então irá aparecer a página de Compare changes, uma forma do GitHub certificar que a inserção das suas mudanças não irá apresentar conflitos com o código de origem. Para fazer a comparação entre seu código e o código origem clique na opção “compare across forks” e mude o “head repository” para o seu repositório, essa opção vai estar disponível na lista quanto clicar no botão dessa ferramenta. Se tudo estiver ok, vai aparacer a seguinte mensagem “Able to merge” e assim você poderá clicar no botão “Create pull request”. Esse passo pode ser observado na imagem abaixo:</p>
<p><img src="images/compare.png" alt=""></p>
</li>
<li>
<p>Em seguida irá aparecer a página de Open a pull request, onde você pode enviar uma mensagem junto com as modificações explicando para o autor do projeto o objetivo e os detalhes da sua colaboração. Por fim, clique no botão “Create pull request”</p>
<p><img src="images/create.png" alt=""></p>
<p><strong>E pronto!</strong> Sua colaboração foi enviada e estará disponível para o autor conferir e decidir se irá aceitá-la.</p>
<p><em>Agora, sabendo como enviar sua colaboração para um projeto open source, fique a vontade para colaborar com o Pascalina!</em></p>
</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>GitHub. <a href="https://pt.wikipedia.org/wiki/GitHub">https://pt.wikipedia.org/wiki/GitHub</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Fork a repo. <a href="https://docs.github.com/en/github/getting-started-with-github/fork-a-repo">https://docs.github.com/en/github/getting-started-with-github/fork-a-repo</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Markdown. <a href="https://pt.wikipedia.org/wiki/Markdown">https://pt.wikipedia.org/wiki/Markdown</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Markdown guide. <a href="https://www.markdownguide.org/basic-syntax/">https://www.markdownguide.org/basic-syntax/</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Hugo Basic Usage. <a href="https://gohugo.io/getting-started/usage/">https://gohugo.io/getting-started/usage/</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Criando um site do zero</title>
            <link>https://pascalina.l2n.me/posts/2020/08/criando-um-site-do-zero/</link>
            <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://pascalina.l2n.me/posts/2020/08/criando-um-site-do-zero/</guid>
            <description>Nós decidimos começar este site para podermos compartilhar coisas interessantes que lemos, estudamos, os desafios que temos encontrado. Além disso, também pensamos em um espaço para comentarmos sobre documentários, filmes, livros, personalidades que nos inspiram nesse projeto.
Para isso, nos propusemos a aprender como fazer o nosso próprio site! Vamos colocar aqui um passo-a-passo de como fizemos.
Primeiramente, instalamos e iniciamos o Git nos nossos computadores. O Git é um gerenciador de versões, muito útil para controlarmos melhor as alterações que fazemos em documentos e repositórios.</description>
            <content type="html"><![CDATA[<p>Nós decidimos começar este site para podermos compartilhar coisas interessantes que lemos, estudamos, os desafios que temos encontrado. Além disso, também pensamos em um espaço para comentarmos sobre documentários, filmes, livros, personalidades que nos inspiram nesse projeto.</p>
<p>Para isso, nos propusemos a aprender como fazer o nosso próprio site! Vamos colocar aqui um passo-a-passo de como fizemos.</p>
<p>Primeiramente, instalamos e iniciamos o Git nos nossos computadores. O Git é um gerenciador de versões, muito útil para controlarmos melhor as alterações que fazemos em documentos e repositórios. Como este é um site colaborativo, fica muito mais fácil!</p>
<p>Depois de instalar o Git no computador (talvez já tenha uma versão instalada, confere digitando <code>git --version</code> no terminal), criamos uma pasta para armenzar as informações do projeto e então percorremos os seguintes passos sempre usando o terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  <span style="color:#75715e"># executamos este comando dentro da pasta </span>
  <span style="color:#75715e"># onde salvamos nosso site</span>
  git init 

  <span style="color:#75715e"># com este comando vemos as alterações</span>
  <span style="color:#75715e"># que precisamos salvar</span>
  git status 

  <span style="color:#75715e"># adicionamos todas as alterações realizadas</span>
  <span style="color:#75715e"># ao próximo commit</span>
  git add -A 
  
  <span style="color:#75715e"># criamos um commit com as alterações. esse passo  </span>
  <span style="color:#75715e"># é muito importante para lembrarmos o que</span>
  <span style="color:#75715e"># significa cada alteração que fizemos em</span>
  <span style="color:#75715e"># cada versão. use mensagens significativas.</span>
  git commit -m <span style="color:#e6db74">&#34;mensagem de identificação&#34;</span> 
  
  <span style="color:#75715e"># vemos todas edições feitas com este comando</span>
  git log 
</code></pre></div><p>Depois de criada a nossa pasta, escolhemos um tema para a estrutura básica do nosso site. Existem várias maneiras de criar o seu próprio site (ferramentas como Wordpress, Wix), mas, como este é um projeto de programação, optamos por uma ferramenta mais simples que usa a programação na criação de sites.</p>
<p>O <a href="https://gohugo.io">Hugo</a> é uma ferramenta desenvolvida em Golang que possibilita a criação de sites estáticos de uma maneira fácil e intuitiva. Por isso também instalamos o Hugo para iniciar o nosso site. Como já temos o Homebrew instalado:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  brew install hugo
</code></pre></div><p>Depois de instalado, nós selecionamos um tema que representasse bem a nós 7 e ao nosso projeto e pedimos para o Hugo criar nosso site (; - dentro da pasta do nosso projeto!:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  hugo new site pascalina
</code></pre></div><p>Com isso o Hugo cria uma nova pasta com as informações do nosso site. Nessa pasta nós inserimos o código do tema que selecionamos anteriormente:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  git clone &lt;link_do_hugo_com_o_codigo_do_tema_escolhido&gt;
</code></pre></div><p>Esses dados são super importantes, então já salvamos tudo com o Git, seguindo os mesmos passos dali de cima. Em seguida para fazermos a personalização do nosso site, nós usamos nosso editor de código:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  code .
</code></pre></div><p>Copiamos a estrutura básica, que já vem com o código do tema que selecionamos no Hugo (geralmente essa informação vem em uma pasta chamada <code>exampleSite</code>), e o inserimos no arquivo <code>config.toml</code>, que já está também na pasta com as informações do nosso site.</p>
<p>A partir daí fizemos as alterações e personalizamos o nosso site como preferimos! Para executarmos o site e vermos como estava ficando usamos:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  hugo server -D
</code></pre></div><p>Depois, nós salvamos tudo de novo com Git. Mas para não correr o risco de perder todo nosso trabalho e também para facilitar o compartilhamento dos dados do nosso site, utilizamos o GitHub para salvar tudo.</p>
<p>Depois de criar e configurar a nossa conta, basta criar um repositório do GitHub para armazenarmos os dados, criamos um repositório também chamado pascalina! Para inserir as informações do nosso computador no GitHub é muito simples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">  git remote add origin &lt;link_do_repositorio_no_GitHub&gt;

  git push origin master
</code></pre></div><p>Nós sempre salvamos as nossas alterações no GitHub. Em outro post nós explicamos como contribuímos em projetos no GitHub e a construção deste site foi nosso primeiro projeto colaborativo!</p>
]]></content>
        </item>
        
        <item>
            <title>Como usar o URI</title>
            <link>https://pascalina.l2n.me/posts/2020/08/como-usar-o-uri/</link>
            <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://pascalina.l2n.me/posts/2020/08/como-usar-o-uri/</guid>
            <description>Nesse post a gente vai falar sobre o URI.</description>
            <content type="html"><![CDATA[<p>Nesse post a gente vai falar sobre o URI.</p>
]]></content>
        </item>
        
    </channel>
</rss>
